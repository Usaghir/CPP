//============================================================================
// Name        : Task.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <iomanip>
#include <vector>
#include <ctime>	 // for using time();
#include <cstdlib>	 // for using srand() and rand();
using namespace std;

struct TimeType {
	int hour;
	int min;
};

int toMinutes(TimeType timeA);
TimeType toTime(int minutes);
TimeType timeDifference(TimeType timeB, TimeType timeC);
TimeType dynamicTimes();

int toMinutes(TimeType timeA) {
	return timeA.hour * 60 + timeA.min;
}

TimeType toTime(int minutes) {
	TimeType time;
	time.hour = minutes / 60;
	time.min = minutes % 60;
	return time;
}

TimeType timeDifference(TimeType timeB, TimeType timeC) {
	TimeType diff;
	int diffMin;
	int diffHour = 0;
	int tolMinB;
	int totMinC;
	tolMinB = toMinutes(timeB);
	totMinC = toMinutes(timeC);
	diffMin = totMinC - tolMinB;
	diffHour = diffMin / 60;
	diffMin %= 60;
	diff.hour = diffHour;
	diff.min = diffMin;

	return diff;

//	diff.hour=timeC.hour-timeB.hour;
//	diff.min=timeC.min-timeB.min;
	return diff;
}

TimeType dynamicTimes() {
	TimeType MintHours;
	vector<TimeType> times;
	int totMints[200], minMints, maxMints, timeDiff;

	srand(time(NULL));
	for (int i = 0; i < 200; i++)
	{
		MintHours= {rand() % 25,rand() % 60};
		times.push_back(MintHours);
		totMints[i] = toMinutes(MintHours);
		minMints=totMints[0];

			if(totMints[i] < minMints)
			{
				minMints=totMints[i];
			}
			maxMints=totMints[0];

			if(totMints[i] > maxMints)
			{
				maxMints=totMints[i];
			}
	}


return timeDifference(toTime(minMints),toTime(maxMints));

}
int main() {
int minutes;
TimeType timeA = { 10, 15 };
minutes = toMinutes(timeA);
cout << minutes << " minutes" << endl; // Should write: 615 minutes

minutes = 124;
TimeType time = toTime(minutes);

cout << setfill('0') << setw(2);
cout << time.hour;
cout << ":";
cout << setfill('0') << setw(2);
cout << time.min << endl;

TimeType timeB = { 10, 30 }, timeC = { 13, 20 }, difference;
difference = timeDifference(timeB, timeC);

cout << setfill('0') << setw(2);
cout << difference.hour;
cout << ":";
cout << setfill('0') << setw(2);
cout << difference.min << endl;

TimeType maxDiff = dynamicTimes();

cout << setfill('0') << setw(2);
cout << maxDiff.hour;
cout << ":";
cout << setfill('0') << setw(2);
cout << maxDiff.min << endl;

return 0;
}
